service: test-connect-frontend

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: prod
  region: eu-west-3
  memorySize: 1024
  timeout: 30
  environment:
    NODE_ENV: production
    NEXT_PUBLIC_APP_URL: https://${self:custom.cloudfrontDomain}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource:
            - "arn:aws:s3:::${self:custom.assetsBucket}/*"
        - Effect: Allow
          Action:
            - cloudfront:CreateInvalidation
          Resource: "*"

custom:
  cloudfrontDomain: ${self:service}-${self:provider.stage}.cloudfront.net
  assetsBucket: ${self:service}-${self:provider.stage}-assets

functions:
  # Basic function for API routes
  api:
    handler: api/handler.main
    events:
      - http:
          path: /api/{proxy+}
          method: ANY
          cors: true

resources:
  Resources:
    # S3 bucket for static assets
    AssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.assetsBucket}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, HEAD]
              AllowedOrigins: ['*']
              MaxAge: 3000
        LifecycleConfiguration:
          Rules:
            - Id: DeleteOldVersions
              Status: Enabled
              NoncurrentVersionExpiration:
                NoncurrentDays: 30

    # CloudFront Origin Access Identity
    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: !Sub "OAI for ${AWS::StackName}"

    # S3 bucket policy
    AssetsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref AssetsBucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"
              Action: s3:GetObject
              Resource: !Sub "${AssetsBucket}/*"

    # CloudFront Distribution
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            # API Gateway origin for dynamic content
            - DomainName:
                Fn::Join:
                  - "."
                  - - Ref: ApiGatewayRestApi
                    - execute-api
                    - ${self:provider.region}
                    - amazonaws.com
              Id: ApiGatewayOrigin
              OriginPath: /${self:provider.stage}
              CustomOriginConfig:
                HTTPPort: 443
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
                OriginSSLProtocols:
                  - TLSv1.2
            # S3 origin for static assets
            - DomainName: !GetAtt AssetsBucket.RegionalDomainName
              Id: S3Origin
              S3OriginConfig:
                OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"

          Enabled: true
          HttpVersion: http2
          IPV6Enabled: true
          Comment: ${self:service} ${self:provider.stage} distribution

          # Cache behaviors
          CacheBehaviors:
            # Static assets caching (CSS, JS, images)
            - PathPattern: "_next/static/*"
              TargetOriginId: S3Origin
              ViewerProtocolPolicy: redirect-to-https
              AllowedMethods:
                - GET
                - HEAD
                - OPTIONS
              CachedMethods:
                - GET
                - HEAD
                - OPTIONS
              Compress: true
              CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # AWS Managed CachingOptimized

            # API routes (no caching for dynamic content)
            - PathPattern: "api/*"
              TargetOriginId: ApiGatewayOrigin
              ViewerProtocolPolicy: redirect-to-https
              AllowedMethods:
                - GET
                - HEAD
                - OPTIONS
                - PUT
                - POST
                - PATCH
                - DELETE
              CachedMethods:
                - GET
                - HEAD
                - OPTIONS
              Compress: true
              CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # AWS Managed CachingOptimized
              OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # AWS Managed CORS-S3Origin

          # Default cache behavior for pages
          DefaultCacheBehavior:
            TargetOriginId: ApiGatewayOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            Compress: true
            # Custom cache policy for Next.js pages
            CachePolicyId: !Ref NextjsCachePolicy
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # AWS Managed CORS-S3Origin

          PriceClass: PriceClass_100 # Use only North America and Europe edge locations

          # Error pages
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 404
              ResponsePagePath: /404
              ErrorCachingMinTTL: 300
            - ErrorCode: 500
              ResponseCode: 500
              ResponsePagePath: /500
              ErrorCachingMinTTL: 300

    # Custom cache policy for Next.js pages
    NextjsCachePolicy:
      Type: AWS::CloudFront::CachePolicy
      Properties:
        CachePolicyConfig:
          Name: ${self:service}-${self:provider.stage}-nextjs-cache-policy
          Comment: Cache policy for Next.js pages
          DefaultTTL: 86400 # 1 day
          MaxTTL: 31536000 # 1 year
          MinTTL: 0
          ParametersInCacheKeyAndForwardedToOrigin:
            EnableAcceptEncodingBrotli: true
            EnableAcceptEncodingGzip: true
            QueryStringsConfig:
              QueryStringBehavior: all
            HeadersConfig:
              HeaderBehavior: whitelist
              Headers:
                - Accept
                - Accept-Language
                - Authorization
                - CloudFront-Forwarded-Proto
                - Host
                - Origin
                - Referer
                - User-Agent
                - x-forwarded-for
            CookiesConfig:
              CookieBehavior: none

  Outputs:
    # Output the CloudFront distribution URL
    CloudFrontUrl:
      Description: "CloudFront Distribution URL"
      Value: !GetAtt CloudFrontDistribution.DomainName
      Export:
        Name: !Sub "${AWS::StackName}-CloudFrontUrl"

    # Output the S3 bucket name
    AssetsBucketName:
      Description: "S3 Bucket for static assets"
      Value: !Ref AssetsBucket
      Export:
        Name: !Sub "${AWS::StackName}-AssetsBucket"

    # Output the API Gateway URL
    ApiGatewayUrl:
      Description: "API Gateway URL"
      Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}"
      Export:
        Name: !Sub "${AWS::StackName}-ApiGatewayUrl"

    # Output the application URL
    AppUrl:
      Description: "Application URL"
      Value: https://${self:custom.cloudfrontDomain}
      Export:
        Name: !Sub "${AWS::StackName}-AppUrl"

# Package configuration
package:
  exclude:
    - .git/**
    - .gitignore
    - .env*
    - node_modules/**
    - .next/**
    - README.md
    - serverless.yml
    - package-lock.json
    - pnpm-lock.yaml
    - yarn.lock
    - .vscode/**
    - .idea/**
    - coverage/**
    - .nyc_output/**
    - .serverless/**
    - .build/**
    - dist/**
    - build/**

# Global variables
globals:
  function:
    timeout: 30
    memorySize: 1024
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_APP_URL: https://${self:custom.cloudfrontDomain}
